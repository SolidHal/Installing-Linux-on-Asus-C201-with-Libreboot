{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red31\green69\blue255;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Olof\'92s instructions \
{\field{\*\fldinst{HYPERLINK "https://plus.google.com/+OlofJohansson/posts/34PYU79eUqP"}}{\fldrslt https://plus.google.com/+OlofJohansson/posts/34PYU79eUqP}}\
\
\
\pard\pardeftab720\sl320\partightenfactor0

\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Building your own kernel and installing it in the Chromebook isn't\
that hard, but there are a couple of extra steps needed.\
\
The kernel resides in the boot partition, and it has to be signed for\
the verified boot firmware to load and boot it. In developer mode,\
it can be signed with any key though, including the default developer\
keys provided on the Chrome OS filesystem.\
\
To make life easier on Ubuntu, I copied over some of the tools from\
Chrome OS. One of them needs libssl 0.9.8, so you need to install that:\
\
# apt-get install libssl0.9.8\
\
Then, the vbutil_kernel tool is used to pack and sign the kernel image\
that is written to disk. You'll also want to install the keys, etc:\
\
# mount -o ro /dev/mmcblk0p3 /mnt\
# cp /mnt/usr/bin/vbutil_kernel /usr/bin\
# rsync -a /mnt/usr/share/vboot /usr/share\
\
There's also another tool that is convenient to have, dump_kernel_config.\
It actually dumps the command line, not the kernel config, from a packed\
kernel image. You can also use vbutil_kernel to do it, but this tool is\
more practical for scripting. So, also:\
\
# cp /mnt/usr/bin/dump_kernel_config /usr/bin\
\
Also, if you haven't already copied over cgpt, do so now.\
\
# cp /mnt/usr/bin/cgpt /usr/bin\
\
And then, of course:\
\
# umount /mnt\
\
Now you have the tools you need on the filesystem. Just to make sure they\
work, try verifying the current kernel on the disk. So:\
\
# vbutil_kernel --verify /dev/mmcblk1p1\
\
Now, configuring and building a kernel is something that I will mostly\
skip over here. People like Marcin Juszkiewicz and others who clean up\
my rough instructions and package things up for the distro will sort\
most of that out. Just a couple of quick pointers:\
\
The sources for the Chrome OS kernel are at\
\pard\pardeftab720\sl320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://git.chromium.org/git/chromiumos/third_party/kernel.git"}}{\fldrslt \cf4 \strokec4 \uc0\u8234 https://git.chromium.org/git/chromiumos/third_party/kernel.git}}. The\
current active branch there is chromeos-3.4. To find the branch that\
corresponds to the release that your Chromebook runs, see the release-R*\
branches.\
\
To generate the kernel config that we build with, besides getting it\
from /boot on the Chrome OS filesystem, you can (in the source tree) run:\
\
$ chromeos/scripts/prepareconfig chromeos-exynos5\
\
It will create the .config file for you.\
\
Then just use the regular distro build tools (make-kpkg), or just make\
+ make_install. If you want/need to rebuild the kernel, you probably\
know how to do these things already. If not, just use the kernel\
copied over from Chrome OS.\
\
The one thing I've done differently than the default build tools\
is that I tend to also do a "make dtbs" and copy the contents from\
arch/arm/boot/dts/*.dtb into /boot. The script below uses those paths\
so revise accordingly if you don't do the same.\
\
So, the kernel format used on ARM Chrom\{e,ium\} OS is a combined format\
called FIT Image. It's produced by the mkimage u-boot tool, which is\
provided by the u-boot-tools package on Ubuntu:\
\
# apt-get install u-boot-tools\
\
Then you need a source file (kernel.its). Mine contains:\
\
/dts-v1/;\
\
/ \{\
\'a0 \'a0 description = "Chrome OS kernel image with one or more FDT blobs";\
\'a0 \'a0 {\field{\*\fldinst{HYPERLINK "https://plus.google.com/s/%23address-cells"}}{\fldrslt \cf4 \strokec4 #address-cells}} = <1>;\
\'a0 \'a0 images \{\
\'a0 \'a0 \'a0 \'a0 kernel@1\{\
	 \'a0 \'a0description = "kernel";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 data = /incbin/("/boot/zImage");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 type = "kernel_noload";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 arch = "arm";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 os = "linux";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 compression = "none";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 load = <0>;\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 entry = <0>;\
\'a0 \'a0 \'a0 \'a0 \};\
\'a0 \'a0 \'a0 \'a0 fdt@1\{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 description = "exynos5250-snow.dtb";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 data = /incbin/("/boot/exynos5250-snow.dtb");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 type = "flat_dt";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 arch = "arm";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 compression = "none";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 hash@1\{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 algo = "sha1";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \};\
\'a0 \'a0 \'a0 \'a0 \};\
\'a0 \'a0 \};\
\'a0 \'a0 configurations \{\
\'a0 \'a0 \'a0 \'a0 default = "conf@1";\
\'a0 \'a0 \'a0 \'a0 conf@1\{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 kernel = "kernel@1";\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 fdt = "fdt@1";\
\'a0 \'a0 \'a0 \'a0 \};\
\'a0 \'a0 \};\
\};\
\
\
Then, to create the binary kernel image, you do:\
\
mkimage -f kernel.its kernel.itb\
\
That creates kernel.itb as the binary image. Finally, you need to sign\
this with the verified boot tools. You also need to specify the kernel\
command line as part of this. The command to do so is:\
\
$ echo "console=tty1 debug root=/dev/mmcblk1p3 rw rootwait" > config.txt\
\
$ vbutil_kernel --pack /tmp/newkernel \\\
\'a0 \'a0 \'a0 --keyblock /usr/share/vboot/devkeys/kernel.keyblock \\\
\'a0 \'a0 \'a0 --version 1 \\\
\'a0 \'a0 \'a0 --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \\\
\'a0 \'a0 \'a0 --config config.txt --vmlinuz kernel.itb --arch arm\
\
Then you write out the newly generated kernel to disk. I use the second\
kernel partition for my test kernels:\
\
# dd if=/tmp/newkernel of=/dev/mmcblk1p2\
\
Then you need to mark the second kernel partition bootable, and you need\
to mark it as higher priority than the first kernel partition. Here is\
where verified boot has a feature that is very convenient when you are\
testing new kernels:\
\
If you mark the kernel partition as higher priority, but don't set the\
"successful" bit in the partition table, it will try to boot it as\
many times as the "tries" field specifies, decrementing it each time.\
\
This means that if I want to try booting a kernel just once, and if\
that doesn't work, boot back to the known good kernel, I will set it to\
something like:\
\
# cgpt add -i 2 -P 15 -S 0 -T 1 /dev/mmcblk1\
\
In other words: For partition index 2 (mmcblk1p2), set priority to 15,\
successful to 0 and tries to 1. Since the first partition has priority\
10, it means this will be tried first, as long as the tries counter is >0.\
\
To see what your settings are, use:\
\
# cgpt show -i 2 /dev/mmcblk1\
\
(and compare with -i 1).\
\
That mostly wraps up most of what I was planning on writing up so far.\
\
Based on my descriptions here, it seems like some of the distro guys\
have gotten enough going that they are mostly self sufficient. I'm of\
course happy to help answer questions, and I want to make sure that the\
platform is convenient to work on once we have upstreamed most of our\
kernel changes over the upcoming months, but beyond that I'll leave most\
of the polish and packaging up to others.\uc0\u65279 }